[ch1, 2 변수]
* 이클립스 단축키
ctrl + shift + L 단축키 전체 목록 보기 
ctrl + +,-   폰트 크기 증가/감소
ctrl + D	     한 줄 삭제
ctrl + alt + down 행단위 복사 
alt + shift + A  멀티컬럼 편집
alt + up, down 행단위 이동
ctrl + i 자동 들여쓰기
ctrl + /   주석 설정, 해제
ctrl + space 자동 완성
.을 눌러도 자동 완성 기능이 뜸

* 소스코드 export 하기 
package explorer 빈공간 우클릭 > export > general > Archive file , next > export 할 파일 선택 > save in zip format 선택 > browse 클릭해서 내보내고 저장할 경로 설정 

---------------------------------------------------------------
* 변수란?
- 단 하나의 값을 저장할 수 있는 메모리 공간

* 변수의 선언 
- 선언 이유 : 값을 저장할 공간을 마련하기 위해
- 선언 방법 : 변수타입 변수이름; ex) int age;
- 값 저장 : 
int age;  // int 타입의 변수 age 선언
age = 25;  // 변수 age에 25 저장 
int age = 25; // 위 두 줄을 한줄로 
- 변수의 초기화 : 변수에 처음으로 값을 저장 
 *주의 : 지역 변수는 읽기 전에 꼭 초기화! ! ! 

* 변수, 상수, 리터럴 
- 변수 (variable) : 하나의 값을 저장하기 위한 공간 
- 상수 (constant) : 한 번만 값을 저장 가능한 변수

int score = 100;
    score = 200; 
final int MAX = 100; // MAX는 상수 (한 번 저장하고 나면 그 값을 바꿀 수 없음)
	   MAX = 200; // error 

- 리터럴 (literal) : 그 자체로 값을 의미하는 것 ( 위 코드들 중의 100, 200, 100, 200을 리터럴이라 함)
- 리터럴의 종류, 접미사 
 논리형 : false, true
 정수형 : 123, 077, 0b0101, 100L / L (long타입)
 실수형 : 3.14, 3.0e8, 1.4f, 0x1  / f, d (float, double) (d는 생략 허용)
 문자형 : 'A', '1', '\n' 
 문자열: "abc", "123", "A", "true" // 둘 이상의 문자는 "" 큰따옴표로 묶어줘야함 -> 'ab';는 에러. "ab"

char ch = 'a';
String str = "abc";
 참고) 값이 출력될 떄 접미사는 출력되지 않음.

- 변수와 리터럴의 타입 불일치
1) 범위가 '변수 > 리터럴' 인 경우 OK 
	int i = 'A';  // int > char, 이 경우 A의 문자코드인 65가 i에 저장됨 
2) 범위가 '변수 < 리터럴' 인 경우 error 
	long l = 3.14f;  // long < float ( 8byte < 4byte)
	float f = 3.14;	// float < double (3.14에서 d는 생략됨) 

- 문자열 결합
""+7+7 = "7"+7 = "77"
7+7+"" = 14+"" = "14"

* 기본형과 참조형
- 기본형 (primitive type)
 오직 8개 (boolean, char, byte, short, int, long, float, double)
 실제 값을 저장 

- 참조형 (reference type)
 기본형을 제외한 나머지 (String, System 등)
  메모리 주소를 저장(4byte 또는 8byte)

* 기본형의 표현 범위 
n비트로 표현할 수 있는 값의 개수: 2의 n제곱 		ex) 2bit로 표현할 수 있는 값의 개수 = 2의 2제곱, 4.

---------------------------------------------------------- 
* printf를 이용한 출력
1. 형식화된 출력 - printf()
- println()의 단점 : 출력형식 지정 불가 
    1) 실수의 자리수 조절 불가 
    2) 10진수로만 출력된다.

2. printf()로 출력형식 지정 가능
 System.out.printf("%2f", 10.0/3); 	// 3.33 (소수점 둘째자리까지 표시해라)
 System.out.printf("%d", 0x1A);		// 26 (10진수)
 System.out.printf("%X", 0x1A);		// 1A (16진수)

(정수) %b %d %o %x
(실수) %f %e
(문자) %c %s 

3. printf()의 지시자
 System.out.printf("[%5d]%n", 10);	// [   10] ==> 오른쪽 정렬로 5칸이란 의미. 5칸 중 10을 제외한 빈 자리는 공백으로 채운다.
 System.out.printf("[%-5d]%n", 10);	// [10   ] ==> 왼쪽 정렬로 5칸이란 의미.
 System.out.printf("[%05d]%n", 10);	// [00010] ==> 빈 자리는 0으로 채운다.

-------------------------------------------------------------
* Scanner : 화면에서 입력받기 
화면으로부터 데이터를 입력받는 기능을 제공하는 클래스

* Scanner를 사용하려면?
 1. import문 추가 (import java.util.*;)
 2. Scanner 객체의 생성 (스캐너 클래스는 객체를 생성해야만 사용할 수 있음)
    Scanner sc = new Scanner(System.in);	// System.in ==> 화면에서 입력받을 거란 뜻
	참고) 스캐너 이용해서 파일로부터 입력 받을 수도 있음. 이건 추후에 설명
 3. 생성한 스캐너 객체를 사용 
   int num = scanner.nextInt(); // 화면에서 입력받은 정수를 num에 저장 
   int num = scanner.nextFloat(); // 실수를 num에 저장하고 싶다면? nextFloat() 사용
   String input = scanner.nextLine(); // 화면에서 입력받은 내용을 input에 저장, 행 단위로 입력한다는 뜻 (nextLine)
   int num = Integer.parseInt(input); // 문자열(input)을 숫자(num)으로 변환

----------------------------------------------------------
* 정수형의 오버플로우
- 오버플로우 : 표현할 수 있는 범위를 넘어섬. 		ex) 계수기에서 9999 까지 세면 다음은 0000이 되는 것 
 최대값+1 -> 최소값
 최소값-1 -> 최대값

- 위의 로직을 2진수로 바꾸면 ?
 1111 +1 -> 0000
 0000-1 -> 1111

- 부호없는 정수(4bit)의 경우, 표현범위가 0~15이므로 이 값이 계속 반복
-  부호있는 정수(4bit)의 경우 표현범위가 -8~7이므로 이 값이 무한히 반복된다.

-------------------------------------------------------------
* 타입간의 변환 방법**
1. 문자와 숫자간의 변환
 문자 0을 더하거나 빼면 된다.

2. 문자열로의 변환 
 빈 문자열("")을 더해준다. (문자든 숫자든)

3. 문자열을 숫자로 변환
 Integer.parseInt(""); 메서드 사용

4. 문자열을 문자로 변환 
 charAt(); 메서드 사용 

ex) 예제
System.out.println("3".charAt(0) - '0');	// 3
System.out.println('3' - '0' +1);		// 4  (3 + 1)
System.out.println(Integer.parseInt("3") + 1);	// 4
System.out.println("3" + 1);			// 31
System.out.println(3 + '0');			// 51 (문자 0은 숫자로 48)