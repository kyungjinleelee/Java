[ch4, 5]
[ch4 배열]

* 배열이란?
- 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것 

* 배열의 선언과 생성 
- 배열의 선언 : 배열을 다루기 위한 참조변수의 선언 . (배열을 선언하는 것은 변수 선언이랑은 다름, 변수는 선언하자마자 저장공간이 만들어지지만 배열						은 아님 )
- 선언 방법 : 
타입[] 변수이름;	ex) int[] score;	// 자바에서는 주로 이 방식으로 씀
타입 변수이름[];	ex) int score[];

타입[] 변수이름; 		// 배열을 선언 (배열을 다루기 위한 참조변수 선언)
변수이름 = new 타입[길이]; // 배열을 생성 (실제 저장공간을 생성) 

ex)
int[] score;		  // int 타입의 배열을 다루기 위한 참조변수 score 선언
score = new int[5];	  // int 타입의 값 5개를 저장할 수 있는 배열 생성
int[] score = new int[5];  // 선언과 생성을 동시에 할 수도 있음!

* 배열의 인덱스
- 배열의 인덱스 : 각 요소(저장공간)에 자동으로 붙는 일련번호
- 인덱스의 범위는 0부터 '배열길이-1' 까지.

score[3] = 100;       // 배열 score의 4번째 요소에 100을 저장한다.
int value = score[3]; // 배열 score의 4번째 요소의 값을 읽어서 value에 저장한다.

-----------------------------------------------------------
* 배열의 길이 (int형 상수)
- 배열이름.length 
int[] arr = new int[5];	// 길이가 5인 int 배열의 선언 + 생성 
int tmp = arr.length;	// arr.length의 값은 5이고 tmp에 5가 저장된다.


" 배열은 한번 생성하면 그 길이를 바꿀 수 없다. "

의문 1)) 왜 못바꾸나?
배열은 연속적이어야 해서, 메모리 안의 연속된 공간을 찾아 배열을 생성한다. 추후 공간을 더 할당하고 싶어도 배열은 연속되어야 하기 때문에 이미 생성된 배열의 연속적인 부분이 비어있을 거라는 보장이 없다.

의문 2)) 그럼 길이가 부족하면 어떻게 할 것인가?
따라서 배열의 길이를 바꾸고 싶으면 아예 새로 큰걸 만들어서 기존 것을 복사하고 저장하던지 그렇게 해야함.

* 배열의 모든 요소 출력
int[] score = new int[6];

for( int i=0; i <= score.length; i++){	// 위의 score 배열 길이가 달라져도 for문 내의 조건식을 변경하지 않아도 됨.
	System.out.println(score[i]);
}

* 배열의 초기화
 - 배열의 각 요소에 처음으로 값을 저장하는 것 
int[] score = new int[5];	     // 길이가 5인 int형 배열을 생성
score[0] = 50;
score[1] = 60;
score[2] = 70;
score[3] = 80;
score[4] = 90;		     // 각 요소에 직접 값을 저장한다. = 배열의 초기화


- 위 로직을 반복문을 이용해서 간단하게 초기화시킬 수도 있다.
   for(int i=0; i<=score.length; i++){
	score[i] = i * 10 + 50;

- 그러나 위의 로직은 반드시 규칙이 있어야만 적용 가능하다.
- 더 간단한 방법은?
int[] score = new int[]{50, 60, 70, 80, 90};
int[] score = {50, 60, 70, 80, 90};   // new int[]를 생략할 수도 있음, (그래서 99% 이 방법을 쓴다), 하지만 반드시 이 한문장으로 써야함

----------------------------------------------------------------------
* 배열의 출력
int[] iArr = { 100, 95, 80, 70, 60};

System.out.println(iArr); // 이렇게 출력하면? 
==> 배열을 가리키는 참조변수 iArr의 값을 출력한다. 즉 [I@14318bb와 같은 형식의 문자열이 출력됨.

 - but 예외!
 char[] chArr = {'a', 'b', 'c', 'd'}; 	// 캐릭터 배열 char 일 때는 예외다.
 System.out.println(chArr); // abcd가 출력됨.

==> 즉 배열의 모든 요소를 출력하려면 for문을 써야함.
for(int i=0; i < iArr.length; i++){
	System.out.println(iArr[i]);
}

==> 배열 출력의 또 다른 방법! - Arrays.toString

System.out.println(Arrays.toString(iArr)); 	// 배열 iArr의 모든 요소를 출력한다. [100, 95, 80, 70, 60]이 출력
- 한 줄로 출력할 수 있어 편리하기에 이 방법을 많이 쓴다.
- Arrays import 해줘야함

int[] iArr1 = new int[10];
EX 1) 1~10의 숫자를 순서대로 배열하시오.
for(int i=0; i<=iArr1.length; i++){
	iArr[i] = i+1;
}

int[] iArr2 = new int[10];
ex 2) 1~10 사이의 난수로 배열을 채우시오.
for(int i=0; i<=iArr2.length; i++){
	iArr2[i] = (int)(Math.random()*10)+1;

--------------------------------------------------------------------
* 배열의 활용 

1. 배열의 모든 요소를 더해서 총합과 평균을 구하시오.
int sum = 0;		// 총합을 저장하기 위한 변수 
flaot average = 0f;	// 평균을 저장하기 위한 변수

int[] score = {100,88,100,100,90};

for(int i=0; i<score.length; i++){	// <=면 안되고 < 여야함. 배열의 길이는 4까지 밖에 없으니까!
	sum += score[i];
}

average = sum / score.length;		// 이러면 틀림 
average = sum / (float)score.length; 	// 계산 결과를 float 타입으로 얻으려 형변환

System.out.println(sum);	// 478 (총합)
System.out.println(average);	// 95.6 (평균)

2. 배열의 요소 중에서 제일 큰 값과 제일 작은 값을 찾는다.
int[] score = {79, 88, 91, 33, 100, 55, 95};

int max = score[0];	// 배열의 첫 번째 값으로 최대값을 초기화
int min = socre[0];	// 배열의 첫 번째 값으로 최소값을 초기화

for(i = 1; i<score.length; i++){		// i=0;부터 시작할 필요 없음, 이미 배열의 첫 번째 값으로 초기화 마쳤으니까
	if(max < score[i]){
		max = score[i];
	} else if (score[i] < min){
		min = score[i];
	}
}

3. (shuffle) 배열의 요소의 순서를 반복해서 바꿔라. 
int[] numArr = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
System.out.println(Arrays.toString(numArr));		// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

for(int i=0; i<100; i++){	// 100번 두 요소 값 바꾸기 (충분히 섞으려고 100이란 값 준거임, 이 숫자는 상관없음)
	int n = (int)(Matn.random()*10);  // 0~9 중의 한 값을 임의로 얻는다.
	int tmp = numArr[0];
	numArr[0] = numArr[n];
	numArr[n] = tmp;
}
System.out.println(Arrays.toString(numArr));		// [5, 8, 2, 7, 1, 6, 4, 9, 3, 0]


4. 로또번호를 생성해라.
  1) 1~45까지 번호 생성 
  2) 6개만 출력
int[] ball = new int[45]; 	// 45개의 정수값을 저장하기 위한 공간 생성

// 배열의 각 요소에 1~45 값 저장
for(int i=0; i<ball.length; i++){
	ball[i] = i+1;  	// ball[0]에 1이 저장된다. (1부터 45까지 저장될 것임)
}

int tmp = 0;	// 두 값을 바꾸는데 사용할 임시변수 
int j = 0;	// 임의의 값을 얻어서 저장할 변수

// 6번만 섞기
for(int i = 0; i<6; i++){	
	j = (int)(Math.random()*45);
	tmp = ball[i];
	ball[i] = j;
	System.out.println(Arrays.toString(ball));
}
// 위에서 섞은거 ball의 앞에서부터 6개 출력
for(int i = 0; i<6; i++){	
	System.out.printf("ball[%d]=%d%n", i, ball[i]);
}

==> 결과: ball[0] = 11 
	  ball[1] = 34
	 ball[2] = 31 ... 쭉쭉

-----------------------------------------------------------------

* String 배열의 선언과 생성 
- 생성
 String[] name = new String[3];  // 3개의 문자열을 담을 수 있는 배열을 생성
 => String은 기본형이 아닌 참조형이기 때문에 0이 아닌 null이 들어간다. (name[0] = null, name[1] = null, name[2] = null)

- 저장 
name[0] = "kim";		
name[1] = "park";	or	String[] name = {"kim", "park", "lee"};
name[2] = "lee";

ex) 가위 ,바위, 보 중에 랜덤출력 하기
String[] strArr = {"가위", "바위", "보"};
System.out.println(Arrays.toString(strArr));

for (int i=0; i<10; i++){
	int tmp = (int)(Math.random()*3);     // 0~2 중에 정수값 랜덤 출력
	System.out.println(strArr[tmp]);


* 커맨드 라인을 통해 입력받기 	(Scanner 대신의 입력 방법)
- 커맨드 라인에 입력한 값이 문자열 배열에 담겨서 전달된다.

---------------------------------------------------------------
* 2차원 배열
- 테이블 형태의 데이터를 저장하기 위한 배열
- 선언
   int[][] score = new int[4][3]; 	// 4행 3열의 2차원 배열을 생성 --> 저장 공간 12개가 마련됨 

- 형태
score[0][0]  score[0][1]  score[0][2]
score[1][0]  score[1][1]  score[1][2]
score[2][0]  score[2][1]  score[2][2]
score[3][0]  score[3][1]  score[3][2]

- 저장과 출력
score[0][0] = 100;			// 배열 score의 1행 1열에 100 저장
System.out.println(score[0][0]);	//  값 출력

- 초기화
 int[][] arr = new int[][]{ {1,2,3}, {4,5,6} };
 int[][] arr = { {1,2,3}, {4,5,6} };	// new int[][] 생략 

- 가능하면 더 직관적으로 이렇게 초기화하자 !
 int[][] arr = {
		 {100,200,300}, 
		 {40,50,60},
		 {40,50,60}, 
		 {40,50,60} 
		};

* 2차원 배열 예제 
quiz 1) 2차원 배열의 모든 값들을 더하는 반복문을 작성하시오. 
 풀이 - 2차원 배열의 모든 값을 출력하려면 2중 반복문을 써야한다. ***템플릿 외우기 

int[][] score = {// score[i].length →
		 {100,100,100}, 
score.length↓	 {40,50,60},
		 {40,50,60},
		 {20,20,20}
		};
int sum = 0; 		// sum을 0값으로 초기화

for(int i = 0; i <score.length; i++){						// score.length;의 값은 4임 (배열의 세로줄 값)
	for(int j = 0; j<score[i].length; j++){					// score[3].length;의 값은 3임 (가로줄 값)
		System.out.printf("score[%d][%d]=%d%n", i, j, score[i][j]);
		sum += score[i][j];
	}
    }
System.out.println("sum=" + sum);

==> 실행 결과 : 
score[0][0]=100
score[0][1]=100
socre[0][2]=100
score[1][0]=40
score[1][1]=50 
... 생략
sum=570			// 0먼저 다 찍고, 1찍고, 2찍고, 3찍고 ..

quiz 3) 퀴즈 프로그램 작성

String[][] words = {
	{"chair", "의자"},	// words[0][0],words[0][1]
	{"computer", "컴퓨터"},	// words[1][0],words[1][1]
	{"integer", "정수"}	// words[2][0],words[2][1]
};

Scanner sc = new Scanner(System.in);	

for(int i=0; i<words.length; i++){
	System.out.printf("Q%d. %s의 뜻은?", i+1, words[i][0]);

String tmp = sc.nextLine();		// 사용자가 입력한 단어를 받음 ex. 의자, 컴퓨터, 자동차 등등
if(tmp.equals(words[i][1])){		// 사용자가 입력한 값이 words[i][1]과 같은지 비교 
	System.out.printf("정답입니다.%n%n");
}else{
	System.out.printf("틀렸습니다. 정답은%s입니다.%n%n", words[i][1]입니다.);
}
}//for문 끝

---------------------------------------------------------
* String 클래스 
1. String클래스는 char[] (문자 배열)와 메서드(기능)을 결합한 것
	
	" String클래스 = char[] + 메서드(기능) "
 q. 왜붙여놈?
 a. 서로 관련이 있어서! --> 그래서 문자 배열(char[])을 그냥 쓰는 것보단 string 클래스를 쓰는게 훨씬 편함.

2. String 클래스는 내용을 변경할 수 없음 (read only)
ex) 
String a = "a";
String b = "b";
a = a + b;	// 하면 a 값은 ab가 될 것 같지만, 아니다. a가 ab로 바뀌는 것이 아니라 새로운 게 만들어지는거다. 
print(a) = "ab" 가 출력되긴 함 (자세한 건 9장에서 ...)

* String 클래스의 주요 메서드 
- char charAt(int index): 문자열에서 해당 위치(index)에 있는 문자를 반환
	ex) String str = "abcde"; 	
	    char ch = str.charAt(3);	// 문자열 str의 4번째 문자 'd'를 ch에 저장

- int length(): 문자열의 길이를 반환
	ex) str.length() = 5

- String substring(int from, int to) : 문자열에서 해당 범위(from~to)의 문자열을 반환 (to는 포함 안 됨)
	ex) String str = "012345";
	      String tmp = str.substring(1,4);   // str에서 index 범위 1~4의 문자들을 반환 (4는 포함 안 됨)
	   System.out.println(tmp);	    // "123"이 출력된다.

- boolean equals(Object obj): 문자열의 내용이 같은지 확인. 같으면 결과는 true, 다르면 false 
- char[] toCharArray(): 문자열을 문자배열(char[])로 변환해서 반환 

---------------------------------------------------------------
* Arrays로 배열 다루기
- 배열의 비교와 출력 - equals(). toString()

int[] 	arr   = {0,1,2,3,4};
int[][] arr2D = {{11,12}, {21,22}};
System.out.println(Arrays.toString(arr)); 		// [0,1,2,3,4]
System.out.println(Arrays.deepToString(arr2D)); 	// [[11,12], [21,22]]
==> 배열에 저장된 내용을 문자열로 바꿔준다.
==> 2차원 배열일 땐 deepToString()을 써야한다. *** 

String[][] str2D  = new String[][] {{"aaa","bbb"},{"AAA","BBB"}};
String[][] str2D2 = new String[][] {{"aaa","bbb"},{"AAA","BBB"}};
System.out.println(Arrays.equals(str2D, str2D2)); 	// false (2차원 배열이기에 deepEquals 써야함)
System.out.println(Arrays.deepEquals(str2D, str2D2)); 	// true
==> 2차원 배열일 땐 deepEquals()을 써야한다. ***


- 배열의 복사: copyOf(). copyOfRange() 
for문을 써도 되지만 위의 메서드들을 이용하면 쉽게 배열을 복사할 수 있음

int[] arr = {0,1,2,3,4};
int[] arr2 = Arrays.copyOf(arr, arr.length);	// arr2 = [0,1,2,3,4]   (arr을 arr.length(5개)만큼 복사해서 arr2에 넣으라는 뜻)
int[] arr3 = Arrays.copyOf(arr, 3);		// arr3 = [0,1,2]
int[] arr4 = Arrays.copyOf(arr, 7);		// arr4 = [0,1,2,3,4,0,0]
int[] arr5 = Arrays.copyOfRange(arr, 2, 4);	// arr5 = [2,3]		(4는 불포함)
int[] arr6 = Arrays.copyOfRange(arr, 0, 7);	// arr6 = [0,1,2,3,4,0,0]


- 배열의 정렬: sort()

int[] arr = {3,2,0,1,4};
Arrays.sort(arr);   			  // 배열 arr을 정렬한다. (오름차순 정렬) 
System.out.println(Arrays.toString(arr)); // [0,1,2,3,4}
