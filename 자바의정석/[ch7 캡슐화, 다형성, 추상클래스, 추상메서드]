[ch7-2 캡슐화, 다형성, 추상클래스, 추상메서드]

* 캡슐화와 접근 제어자
- 접근 제어자를 사용하는 이유 :
  1. 외부로부터 데이터를 보호하기 위해서 
   2.  외부에는 불필요한, 내부적으로만 사용되는 부분을 감추기 위해서 (굳이 외부에 노출시킬 필요 없잖아?)

Ex1)
public class Time {
	public int hour;		  ㅡㅡㅡㅡㅡ>	    Time t = new Time();
	public int minute;			    t.hour = 25;    // 멤버변수에 직접 접근 가능
	public int second;
}
 Ex2)
 public class Time {
	private int hour;	// 접근 제어자를 private으로 하여 
	private int minute;	// 외부에서 직접 접근하지 못하도록 한다. 
	private int second;
	
	public int getHour() { return hour; }	    // 메서드는 public으로 해서, 외부에서 메서드를 통해 iv로 접근하도록 함
	public void setHour(int hour) {		    // (메서드를 통한 간접 접근 허용)
		if (hour < 0 || hour > 23) return;
		this.hour = hour;
	}
}
↓
Time t = new Time();
t.setHour(25); 		// hour값을 25로 설정했지만 상단의 setHour메서드 조건으로 인해 25로 바뀌지 않는다.  -> 데이터 보호 

==> 이런 식으로 직접 접근을 막고, 메서드를 통한 간접 접근을 허용하는 것이 '캡슐화'


Ex3)
class Time {
 	private int hour; 	// 0~23사이의 값을 가져야함.
    	private int minute;
    	private int second;

	public void setHour(int hour) {		    // hour값 설정 메서드 	    
		if(hour < 0 || hour > 23) return;   // 0~23사이의 값이 아니면 return을 만나 메서드를 빠져나가도록 

		this.hour = hour;		    // hour값 읽기 메서드
	}

	public int getHour() { return hour; };
}

public class TimeTest {
	public static void main(String[] args) {
		Time t = new Time();
	//	t.hour = -100;	이렇게 접근 말고 
		t.setHour(21);			
		System.out.println(t.getHour());    // 21 (hour값 21로 바뀜) 
		t.setHour(100);			
		System.out.println(t.getHour());    // 21 (hour값 100으로 안바뀜, 유효범위가 아님)
	}
}

---------------------------------------------------------------
* 다형성  (polymorphism) ***** 중요
- 여러 가지 형태를 가질 수 있는 능력
- 조상 타입 참조 변수로 자손 타입 객체를 다루는 것 **

class Tv {
    boolean power;	// 전원상태 (on/off)			 원래대로라면 
    int channel;	// 채널 					 Tv t = new Tv();
								 SmartTv s = new SmartTv(); 처럼
    void power()      { power =! power; }			
    void channelUp()  { ++channel; }				 각 객체에 맞는 리모컨을 주고 다룸
    void channelDown(){ --channel; }			ㅡㅡㅡㅡ>
}
class SmartTv extends Tv {
    String text;	// 캡션(자막)을 보여주기위한 문자열
    void caption() { /* 생략 */ }
}
↓
Tv t = new SmartTv();	// ok. (타입이 불일치여도 ok인 것을 다형성이라고 한다) 

- 객체와 참조변수의 타입이 일치할 때와 일치하지 않을 때의 차이 ?
    SmartTv s = new SmartTv();		// 참조 변수와 인스턴스의 타입이 일치
    Tv          t  = new SmartTv();		// 조상 타입 참조변수로 자손 타입 인스턴스를 참조 
 ▶ 스마트티비 리모컨으로는 스마스티비 기능 7개를 다 다룰 수 있음. (=7개 멤버를 다 다룰 수 있음)
      그러나 그냥 티비 리모컨(스마트티비의 조상)으로는 스마트티비 기능을 5개만 다룰 수 있음.

- 자손 타입의 참조변수로 조상 타입의 객체를 가리킬 순 없음!
    Tv          t  = new SmartTv();		// ok. 허용
  SmartTv  s = new Tv();		// error. 허용 안 됨 (자손 타입이 갖고 있는 멤버가 조상타입의 멤버보다 많을 수 있기 떄문)

* 다형성 정리
Q. 참조변수의 타입은 인스턴스의 타입과 반드시 일치해야 하나요?
A. 아님! 일치하는 것이 보통이지만 일치 하지 않을 수도 있음. (=다형성)

Q. 참조변수가 조상타입일 때와 자손타입일 때의 차이?
A. 참조변수로 사용할 수 있는 멤버의 갯수가 달라짐.

Q. 자손타입의 참조변수로 조상타입의 객체를 가리킬 수 있나요?
A. 아님! 허용되지 않음.

--------------------------------------------------------------------
* 참조변수의 형변환
- 결론 :::  사용할 수 있는 멤버의 갯수를 조절하는 것 (리모컨 바꿔가면서) 
- 조상 자손 관계의 참조변수는 서로 형변환 가능

FireEngine f = new FireEngine();	// 가정) FireEngine클래스와 Ambulance클래스는 Car클래스를 상속받았다고 가정 

Car c = (Car)f;				// ok. 조상인 Car타입으로 형변환 (생략 가능)
FireEngine f2 = (FireEngine)c;		// ok. 자손인 FireEngine타입으로 형변환 (생략 불가)
Ambulance a = (Ambulance)f;		// error. 상속관계가 아닌 클래스 간의 형변환 불가 (형제관계)

Ex)
class Ex7_7 {
    public static void main(String args[]) {
	Car car = null;
	FireEngine fe = new FireEngine();
	FireEngine fe2 = null;
	
	fe.water();
	car = fe;		// car = (Car)fe; 에서 형변환이 생략됨
//	car.water();		//  error. Car타입의 참조변수로는 water()를 호출할 수 없다.
	fe2 = (FireEngine)Car;	// 자손타입 ← 조상타입. 형변환 생략 불가
	fe.water();
    }
}

class Car {					  |		class FireEngine extends Car {    // 소방차
    String color;				  |			void water() {	   // 물을 뿌리는 기능
    int door;					  |				System.out.println("water! ");
						  |			}
    void drive() {    // 운전하는 기능		  |		  }
	System.out.println("drive ~");				
    }
    void stop() {     // 멈추는 기능
	System.out.println("stop! ");
    }
}
-------------------------------------------------------------------
* instanceof 연산자
- 참조변수의 형변환 가능 여부 확인에 사용. 형변환이 가능하면 true 반환
- 형변환 전에 반드시 instanceof로 확인해야 함 
  ex)
   void doWork(Car c) {
      if (c instanceof FireEngine) {	     // 1. 형변환이 가능한지 확인 (c가 가르키는 객체가 FireEngine의 자손이냐? 란 의미)
   	   FireEngine fe = (FireEngine)c;    // 2. (1.에서 ture가 나오면) 형변환
	   fe.water();
	   ...
  
  FireEngine fe = new FireEngine();
  System.out.println(fe instanceof Object); 		// true
   System.out.println(fe instanceof Car); 		// true
   System.out.println(fe instanceof FireEngine); 		// true

Q. 참조변수의 형변환은 왜 하나요?
A. 참조변수(리모콘)을 변경함으로써 사용할 수 있는 멤버의 갯수를 조절하기 위해

---------------------------------------------------------------------------
---------------------------------------------------------------------------
* 다형성의 장점 ***
1. 다형적 매개변수 
2. 하나의 배열로 여러 종류의 객체 다루기 
↓

1. 다형적 매개변수 (= 매개변수의 다형성)
- 참조형 매개변수는 메서드 호출 시, 자신과 같은 타입 또는 자손타입의 인스턴스를 넘겨줄 수 있다.
ex)
class Product {
     int price;		// 제품가격
     int bonuspoint;	// 보너스점수
}
class Tv extends Product {}
class Computer extends Product {}
class Audio extends Product {}

class Buyer {     // 물건사는 사람 
     int money = 1000;	// 소유 금액
     int bonusPoint = 0;// 보너스점수
}

// 물건사는 사람에 buy 메서드를 추가해주고 싶다고 가정.

void buy(Tv t) {
	money -= t.price;
	bonusPoint += t.bonusPoint;	// 매개변수를 Tv로 주면, Computer도 Audio도 각각 추가해줘야 해서 불편/유지보수에 불리
}

// ↓ 이렇게 바꾸자.

void buy(Product p) {
	money -= p.price;
	bonusPoint += p.bonusPoint;	// Tv타입의 조상타입인 Product를 매개변수로 쓰자.
}

// 그럼 위 buy 메서드 하나로 여러 물건을 buy할 수 있다.

Buyer b = new Buyer();				
Tv tv = new Tv();
Computer com = new Computer();					
b.buy(tv);
b.buy(com);

Product p1 = new Tv();		// 다형성 (조상 타입의 참조변수로 자손 객체를 가리킴)
Product p2 = new Computer();	// 다형성
Product p3 = new Audio();	// 다형성

==> 장점 1 : 메서드 하나로 여러 개의 물건을 살 수 있다. 

2. 여러 종류의 객체를 배열로 다루기 
- 조상 타입의 배열에 자손들의 객체를 저장할 수 있다.
ex)								
Product p1 = new Tv();						Product p[] = new Product[3];
Product p2 = new Computer();			=		p[0] = new Tv();
Product p3 = new Audio();					p[1] = new Computer();
								p[2] = new Audio();

==> 배열 p에는 다형성으로 여러 종류의 객체(Tv, Computer, Audio)가 있을 수 있게 되는 것임.

class Buyer {	 // 물건사는 사람
	int money = 1000;	// 소유금액
	int bonusPoint = 0;	// 보너스점수

	Product[] cart = new Product[10];	// 구입한 금액을 담을 배열 
	int i = 0;
	void buy(Product p) {
		if(money < p.price) {
			System.out.println("잔액부족");
			return;
		}
		money -= p.price;
		bonusPoint += p.bonusPoint;
		cart[i++] = p;	// 물건을 사면 카트에 담기
	}
}

------------------------------------------------------------------
* 추상 클래스 (abstract class)
- 미완성 설계도. 즉 미완성 메서드를 갖고 있는 클래스
ex)
abstract class Player {  // 추상클래스 (미완성 클래스)
	abstract void play(int pos);	// 추상메서드 (몸통{}이 없는 미완성 메서드)
	abstract void stop();		// 추상메서드
}

- 추상 클래스는 다른 클래스 작성에 도움을 주기 위한 것으로, 인스턴스 생성 불가함.
  Player p = new Player();		// error. 추상 클래스의 인스턴스 생성 불가 (= 설계도가 미완성인데 어떻게 제품을 만들어)

- 그럼 언제 인스턴스 만들 수 있어여? 
- 상속을 통해 추상 메서드를 완성해야 인스턴스 생성 가능!
ex)
class AudioPlayer extends Player {
	void play(int pos) { /* 내용 생략 */ }	// 추상메서드를 구현 (몸통{} 만들어줌)
	void stop() { /* 내용 생략 */ }		// 추상메서드를 구현
}

AudioPlayer ap = new AudioPlayer(); 	// ok.


* 추상 메서드 (abstract method)
- 미완성 메서드. 구현부(몸통, {})가 없는 메서드
- abstract 리턴타입 메서드이름 ();

- 어떤 때 쓰나?  -> '꼭 필요하지만 자손마다 다르게 구현될 것으로 예상되는 경우' 에 쓴다.
ex)
abstract class Player { 	  // 추상클래스
	abstract void play(int pos);	// 추상메서드
	abstract void stop();		// 추상메서드
}
class AudioPlayer extends Player {
	void play(int pos){ /* 내용 생략 */ }	// 추상메서드를 구현
	void stop(){ /* 내용 생략 */ }		// 추상메서드를 구현
}
abstract class AbstractPlayer extends Player {
	void play(int pos) { /* 생략 */}	// 추상메서드를 구현
					//  Player클래스로부터 메서드 2개를 상속받았는데 1개만 구현 > 그래서 abstract 붙여준거임
}					// abstract 안 붙이면 에러남			


- 추상 메서드 호출 가능 ( 메서드는 선언부만 알면 호출가능하므로 추상 메서드도 호출 가능 !! )
ex)
abstract class Player {
	boolean pause;		// 일시정지 상태를 저장하기 위한 변수
	int currentPos;		// 현재 play되고 있는 위치를 저장하기 위한 변수

	Player() {		// 추상클래스도 생성자가 있어야 함
	    pause = false;
	    currentPos = 0;
	}
	/* 지정된 위치(pos)에서 재생을 시작하는 기능이 수행하도록 작성되어야 함 */
	abstract void play(int pos);	// 추상메서드 (cd플레이어나 카세트플레이어 등 play하는 방법이 각기 다를 것 - 추상메서드)
	/* 재생을 즉시 멈추는 기능을 수행하도록 작성되어야 함 */
	abstract void stop();		// 추상메서드

	void play() {
	     play(currentPos);		// 추상메서드를 사용할 수 있다.
	}

  - 호출 순서 
     ① 상속 통해 자손이 완성 {}
     ② 자손 객체 생성 
     ③ 호출

* 추상 메서드 실습 
abstract class Player { 	  
	abstract void play(int pos);	
	abstract void stop();		
}
// 추상 클래스는 상속을 통해 완성해야 객체 생성 가능
class AudioPlayer extends Player {
	void play(int pos){ System.out.println( pos+"위치부터 play합니다."); }	
	void stop()	  { System.out.println( "재생을 멈춥니다."); }		
}

public class PlayerTest {
      public static void main(String[] args) {
//	    Player p = new Player();		// error. 추상클래스 객체 생성 X
//	    AudioPlayer ap = new AudioPlayer();
	    Player ap = new AudioPlayer();	// 다형성 (위 문장과 결과 동일)
	    ap.play(100);			
	    ap.stop();
      }
}

=====> 결과 : 
100위치부터 play합니다.
재생을 멈춥니다.

--------------------------------------------------------------
* 추상클래스의 작성
- 여러 클래스에 공통적으로 사용될 수 있는 추상클래스를 바로 작성하거나 기존클래스의 공통 부분을 뽑아서 추상클래스를 만든다.

public class Ex7_10 {
   public static void main(String[] args) {
//	Unit[] group = { new Marine(), new Tank(), new Dropship() };	아래 네 줄을 합쳐놓은 것과 동일
	Unit[] group = new Unit[3];
	group[0] = new Marine();
	group[1] = new Tank();
	group[2] = new Dropship();

//	group[0].move(100, 200);	// Marine객체의 move(100, 200)을 호출 
//	group[1].move(100, 200);	// Tank객체의 move(100, 200)을 호출 
//	group[2].move(100, 200);	// Dropship객체의 move(100, 200)을 호출 
// 	이 세 문장을 for 반복문으로 작성할 수 있다. **

	for(int i = 0; i < group.length; i++)
	     group[i].move(100, 200);	// group배열을 모두 동일한 좌표만큼 이동
   }
}

abstract class Unit {			// 기존 클래스의 공통 부분을 뽑아서 추상클래스로 만듦
	int x, y;
	abstract void move (int x, int y);
	void stop() { /* 현재 위치에 정지 */ }
}

class Marine extends Unit {		// 보병
     void move(int x, int y) {
	System.out.println("Marine[x=" + x + ",y=" + y + "]");
     }
     void stimPack() { /* 스팀팩을 사용한다 */ }
}

class Tank extends Unit {		// 탱크
     void move(int x, int y) {
	System.out.println("Tank[x=" + x + ",y=" + y + "]");
     }
     void changeMode() { /* 공격모드를 변환한다 */ }
}

class Dropship extends Unit {		// 비행기
     void move(int x, int y) {
	System.out.println("Dropship[x=" + x + ",y=" + y + "]");
     }
     void unload() { /* 선택된 대상을 내린다 */ }
}

////////////////////////////////
Object[] group = new Object[3];
group[0] = new Marine();
group[1] = new Tank();
group[2] = new Dropship();

for(int i = 0; i < group.length; i++)
	group[i].move(100, 200);	// error. Object 클래스에 move 메서드가 정의되어 있지 않다.

-----------------------------------------------------------------------
* 추상클래스의 작성 (2)
- 추상화 ↔ 구체화
- 추상화된 코드는 구체화된 코드보다 유연하다 -> 변경에 유리
ex)
GregorianCalendar cal = new GregorianCalendar();		// ① 구체적, 분명하고 명확함
Calendar cal = Calendar.getInstance();		// 추상적 (getInstance는 Calendar의 자손 객체를 cal로 반환, 뭘 반환할지는 불분명함 )

// ①번 코드같은 경우에는 나라(os)마다 설정을 변경 해주어야함.
// ②번 코드같은 경우에는 시스템 os 설정에 따라 어떤 캘린더를 쓸 지 결정할 수 있음. (다형성)

 public static Calendar getInstance(Locale aLocale) {
	return createCalendar(TimeZone.getDefault(), aLocale(); // getInstance메서드가 캘린더를 생성해서 반환 
}

private static Calendar createCalendar(Timezone zone, Locale aLocale) {
	// ...
	if (calType != null) {
		switch (caltype) {	// Calendar의 자손들이지만 다형성으로 쓸 수 있다.
		case "buddhist":	// 불교력
		      cal = new BuddhistCalendar(zone, aLocale);	// 캘린더 타입에 따라 다른 객체를 생성해서 반환
		      break;
		case "japanese":	// 일본력
		    cal = new JapaneseImperialCalendar(zone, aLocale);
		      break;
		case "gregory":		// 서양력
		      cal = new GregorianCalendar(zone, aLocale);
		      break;

------------------------------------------------------------------
* 추상클래스의 작성
