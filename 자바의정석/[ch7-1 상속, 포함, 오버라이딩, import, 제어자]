[ch7-1 상속, 포함, 오버라이딩, import, 제어자]

* 상속  (Inheritance)
▶ 기존의 클래스로 새로운 클래스를 작성하는 것 (코드의 재사용)
▶ 두 클래스를 부모와 자식으로 관계를 맺어주는 것 

  class 자식클래스 extends 부모클래스{
	// ...
  }

  ex)
  class Parent{}
  class Child extends Parent{	// Child 클래스와 Parent 클래스를 상속 관계에 있다고 한다.
	// ...
  }

▶ 자손은 조상의 모든 멤버를 상속받는다. (생성자, 초기화블럭 제외)
▶ 즉 자손의 멤버 개수는 조상보다 적을 수 없다. (같거나 많다.) 

  ex)
  class Parent{
	int age;
  }
  class Child extends Parent {}	 // Child클래스의 멤버가 0개처럼 보이지만 실은 1개다. (Parent클래스의 멤버가 1개이기 때문에)

▶ 자손의 변경은 조상에 영향을 미치지 않는다.
  ex)
   class Parent{
	int age;
  }
  class Child extends Parent {
	void play() {		 // 새로운 멤버 추가했지만 조상인 Parent클래스에는 영향 주지 않는다. Child클래스 총 멤버는 2개
		System.out.println("놀자~");
	}
  }

------------------------------------------------------------------
* 포함 관계
▶ 포함(composite)이란?
- 클래스의 멤버로 참조변수를 선언하는 것 
ex)
class Circle {
   int x;  // 원점의 x좌표			class Circle {
   int y;  // 원점의 y좌표	ㅡㅡㅡㅡ> 	     Point c = new Point();	// 원점 		 class Point {
   int r;  // 반지름 				     int r;			// 반지름		int x;
}						}  							int y;
==> Circle이 Point를 '포함' 관계에 있음.								 }

- 작은 단위의 클래스를 만들고, 이 둘을 조합해서 클래스를 만든다.
ex) '자동차'라는 클래스를 만들 때 
class Car {
   Engine e = new Engine();	// 엔진
     Door[] d = new Door[4];	// 문, 문의 개수를 넷으로 가정하고 배열로 처리
   // ...
}
==> 멤버들을 다 쓰는 것 보다는, 작은 단위의 클래스를 만들고 이를 조합해서 클래스를 만들기
==> 그럼 복잡도가 줄어들고 재사용성이 늘어난다.

--------------------------------------------------------------------
* 클래스 간의 관계 설정 
- 상속관계 : '~은 ~이다.(is-a)'
- 포함관계 : '~은 ~을 가지고 있다.(has-a)'

Q. 상속관계로 할 지 포함관계로 할 지 긴가민가할 때 
A. 문장을 만들어 보고 어떤 문장이 더 자연스러운지 본다 ! 
  ex) 원(Circle)은 점(Point)이다.		- Circle is a Point.
     원(Circle)은 점(Point)을 가지고 있다. - Circle has a Point. // 이 문장이 더 자연스러움 > 포함 관계로 관계설정 한다.

     class Circle {
	 Point p = new Point();		// 참조변수 선언과 초기화까지 필수로 해줘야 함
	 int r;
     } 	// ==> 사실 대부분의 경우(90%)가 포함 관계이다.
     public class InheritanceTest {
	public static void main(String[] args){
		Circle c = new Circle();
		c.p.x = 1;		// 접근 방법 주의 
		c.p.y = 2;
		c.r = 3;
		System.out.println(c.p.x);	// 1
		System.out.println(c.p.y);	// 2
		System.out.println(c.p.z);	// 3
	}
     }
---------------------------------------------------------------------
* 단일 상속  (Single Inheritance)
- java는 단일상속만을 허용한다.     (C++은 다중상속 허용, 다중상속이 장점도 있지만 단점도 있기에 자바는 포기한 것)
  ex)
   class TvDVD extends Tv, DVD {    // error. 조상은 하나만 허용됨 
	// ... 
  }	

- 비중이 높은 클래스 하나만 상속관계로, 나머지는 포함관계로 한다.
  ex) 
  class TvDVD extends Tv {           // Tv는 상속으로 처리
	DVD dvd = new DVD();	// DVD는 포함으로 처리 ( 1. DVD 객체 만들기)

	void play() {		// 2. DVD가 갖고있는 메서드들을 간단히 호출  
	   dvd.play();
	} 
	void stop() {
	   dvd.stop();
	}
	...
  }


* Object 클래스 : 모든 클래스의 조상
- 부모가 없는 클래스는 자동적으로 Object 클래스를 상속받게 됨	(컴파일러가 자동으로 추가)
- 모든 클래스는 Object 클래스에 정의된 11개의 메서드를 상속받음 	      ex) toString(), equals(Object obj), hashCode(), ...
	public static void main(String[] args){
		Circle c = new Circle();
		System.out.println(c.toString());	// "Circle@15db9742"
		System.out.println(c);			// "Circle@15db9742" 위와 똑같은 코드 나옴 (객체의 주소)
	}

-------------------------------------------------------------
* 오버라이딩  (= 메서드 오버라이딩)
- 상속받은 조상의 메서드를 자신에 맞게 변경하는 것

class MyPoint3 {
	int x;
	int y;
	String getLocation() {
	   return "x:"+ x +", y:"+ y;
	}
}

class MyPoint3D extends MyPoint3{
	int z;

	String getLocation() {	      // 조상의 getLocation()을 오버라이딩
	    return "x:"+ x +", y:"+ y +", x:"+ x;
	}
}
///////////////////////////////////////////
class MyPoint3 {
	int x;
	int y;

	MyPoint3(int x, int y){	      // main에서 '한번에 생성 + 초기화'를 위한 추가문
	   this.x = x;
	   this.y = y;
	}

	public String toString() {    // Object 클래스의 toString()을 오버라이딩
	   return "x:"+ x +", y:"+ y;
	}
}

public class OverrideTest{
	public static void main(String[] args){
		MyPoint3 p = new MyPoint3(3, 5) // 한번에 생성 + 초기화 
		System.out.println(p);		// 아래 5줄 코드가 이 2줄 코드가 됐다 ! 

//		MyPoint3 p = new MyPoint3();  // 객체 생성
//		p.x = 3;
//		p.y = 5;
//		System.out.println(p.x);	
//		System.out.println(p.y); 이 줄 대신 
//		System.out.println(p.toString()); 이거. 이걸 더 간단히 하면
//		System.out.println(p);		// 참조변수 p만 출력해주면 편함
	}
}


* 오버라이딩의 조건 
  1. 선언부가 조상 클래스의 메서드와 일치해야 함  		      (선언부 : 반환타입, 메서드이름, 매개변수 목록)
   2. 접근 제어자를 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없음  (public, protected, private)
   3. 예외는 조상 클래스의 메서드보다 많이 선언할 수 없음
     class Parent {
	 void parentMethod() throws IOException, SQLException {	 // 예외의 갯수 2개
		// ...
	 }
     }
     class Child extends Parent {
	 void parentMethod() throws IOException {		// 예외의 갯수 1개 (조상 메서드보다 같거나 적어야함)
		// ...
	 }
     }

* 오버로딩 vs 오버라이딩 
- 이름만 비슷하지 서로 관계가 아예 없음 ! 

▶ 오버로딩    : 기존에 없는 새로운 메서드를 정의하는 것 (new)
▶ 오버라이딩 : 상속받은 메서드의 내용을 변경하는 것    (change, modify)

ex)
class Parent {
	void parentMethod() {}
}

class Child extends Parent {
	void parentMethod() {}		// 오버라이딩
	void parentMethod(int i) {}	// 오버로딩 (이름이 같은 메서드를 매개변수만 다르게 한)

	void childMethod() {}		// 메서드 정의 
	void childMethod(int i) {}	// 오버로딩 
	void childMethod() {}		// 중복 정의 (error)
}

------------------------------------------------------------------------
* 참조변수 super
- 객체 자신을 가리키는 참조변수. 인스턴스 메서드(생성자)내에서만 존재 (=static메서드 내에서 사용 불가)
- 조상의 멤버를 자신의 멤버와 구별할 때 사용

(this : lv와 iv 구별에 사용, super: 조상 멤버와 자신 멤버 구별에 사용)

Ex1)
class superTest{
   public static void main(String args[]){
	Child c = new Child();
	c.method();
   }
}
class Parent { int x = 10;   /* super.x */ }

class Child extends Parent {
	int x = 20;	     // this.x
	
	void method() {
	   System.out.println("x=" + x);	     // 가까운 x를 가리킴, 20
  	   System.out.println("this.x=" + this.x);   // 20
 	   System.out.println("super.x=" + super.x);  // 10, 조상의 멤버 x를 가리킴
	}
}

Ex2)
class superTest2{
   public static void main(String args[]){
	Child2 c = new Child2();
	c.method();
   }
}
class Parent2 { int x = 10;   /* super.x와 this.x 둘 다 가능 */ }

class Child2 extends Parent2 {
	void method() {
	   System.out.println("x=" + x);	      // 10, 자신 멤버에 x가 없으니 조상 멤버를 가리킴 
  	   System.out.println("this.x=" + this.x);    // 10
 	   System.out.println("super.x=" + super.x);  // 10
	}
}


* super() - 조상의 생성자 	(참조변수 super와 전혀 연관 없음)
- 조상의 생성자를 호출할 때 사용
- 조상의 멤버는 조상의 생성자를 호출해서 초기화

Q. 조상의 생성자를 호출할 일이 있을까요?
A. 있다. 자손 클래스의 생성자에서 조상 클래스의 생성자를 호출할 일이 있다.

ex)
class Point {						class Point3D extends Point {
    int x, y;						    int z;

    Point(int x, int y) {  // 생성자			    Point3D(int x, int y, int z) {
	this.x = x;    // iv 초기화	  ㅡㅡㅡㅡㅡ>		this.x = x;   // 조상의 멤버를 초기화   (비추)
	this.y = y;    // iv 초기화				this.y =  y;   // 조상의 멤버를 초기화   (비추)
    }								this.z = z;
}							    } 
 							}   // 에러는 아니지만 .. 이렇게 하면 안 됨
							 ==> 자손의 생성자는 자기가 선언한 것만 초기화 해야 함. 
- 이렇게 바꾸자! **
Point3D(int x, int y, int z) {
     super(x, y);	// 조상클래스의 생성자 Point(int x, int y)를 '호출'   (조상의 멤버를 초기화 하는 대신)
     this.z = z;	// 자신의 멤버를 초기화 
}

▶ 즉, 내가 직접 할 게 아니라, 조상의 생성자를 호출해서 조상 생성자가 조상 멤버를 초기화 하도록 만들라는 것.

* 주의
- 모든 생성자는 생성자의 첫 줄에 반드시 다른 생성자를 호출해야 함 ***		(super() 혹은 this())
- 그렇지 않으면 컴파일러가 생성자의 첫 줄에 super();를 삽입
- 기본 생성자 작성 필수 ***

ex1)
class Point {
    int x;
    int y;
}

    Point() { // 생성자1
	this(0, 0);	// ok. 첫 줄에 생성자 호출함
    }
    
       Point(int x, int y) {
	this.x = x;     // 생성자가 아니기 때문에 컴파일러가 조상 기본 생성자 호출 코드인 super(); 삽입함
	this.y = y;
    }

==> 코드가 이케 바뀐다
       Point(int x, int y) {
	super(); 	// Object();
	this.x = x;    
	this.y = y;
    }

ex2 에러 예제)
class Point {
    int x;
    int y;						|	class PointTest {
							|	    public static void main(String args[]){
       Point(int x, int y) {				|		Point3D p3 = new Point3D(1, 2, 3);
	this.x = x;   // ① 				|	    }
	this.y = y;					|	}
    }							|	// Point()가 없다는 컴파일러 에러 발생함. 
    String getLocation() {
	return "x :" + x + ", y " + y;
    }
} // end Point

class Point3D extends Point {
    int z;

    Point3D(int x, int y, int z) {  // 에러 발생 위치
	this.x = x;   // ②
	this.y = y;
	this.z = z;
    }
    String getLocation() {	// 오버라이딩
	return "x :" + x + ", y " + y + ", z:" + z;
    }
}

Q. 에러 발생 이유 
A. 모든 생성자는 첫 줄에 다른 생성자를 호출해야 한다. 
그러나 ①번 위치에서 생성자가 없어, 컴파일러가 super();를 자동 추가하게 된다. 의미는 조상클래스인 Object 클래스의 생성자를 호출하라는 의미. 
또한 ②번 위치에서도 생성자가 없어 super();를 자동 추가하게 된다. 이 의미는 조상클래스인 Point클래스의 생성자(Point())를 호출하라는 의미.
Point(){} 생성자를 호출하려고 보니 이 기본 생성자가 없다! ==> 그래서 error 

Q. 에러 해결하려면 ?
A. 두 가지 방법이 있음 
  1. Point() {} 기본 생성자 추가해주기
   2. 기본 생성자 호출 자체를 하지 않도록 코드를 바꿔주기 
     Point3D(int x, int y, int z){
	 super(x, y);	// 기본 생성자가 아니라 ①번 코드를 호출하도록
	 this.z = z'
     }

-------------------------------------------------------------------------
* 패키지 (package)
- 서로 관련된 클래스의 묶음
- 클래스는 클래스 파일(*.class), 패키지는 폴더. 하위 패키지는 하위 폴더
- 클래스의 실제 이름(full name)은 패키지를 포함 (java.lang.String)

* 패키지의 선언
- 패키지는 소스파일의 첫 번째 문장으로 단 한번 선언
  ex)
  // PackageTest.java
  package com.codechobo.book; 	// 패키지 선언
  
  public class PackageTest{	// 패키지 com.codechobo.book
	public static void main(String[] args){
	   System.out.println("Hello, world!");
        }
  }
  class PackageTest2 {}		// 패키지 com.codechobo.book

- 같은 소스 파일의 클래스들은 모두 같은 패키지에 속하게 됨
- 패키지 선언이 없으면 이름없는(unnamed, default) 패키지에 속하게 됨

* 클래스 패스 (classpath)
- 클래스 파일(*.class)의 위치를 알려주는 경로 (path)
- 환경변수 classpath로 관리하며, 경로간의 구분자는 ';'를 사용
- classpath라는 환경변수를 만들고, 패키지의 루트를 등록해줘야 함.

* 클래스 패스 등록 순서
- 제어판 > 환경변수 검색 > 시스템 환경 변수 편집 클릭 > 하단의 '환경변수' 버튼 클릭 > 시스템 변수에서 '새로 만들기' 버튼 클릭 > 
   변수 이름엔 classpath, 변수 값엔 해당 패키지의 bin 삽입 (ex. c:\java\workspace\ch07\bin) > 확인 클릭
- 환경변수 값이 바뀌면 커맨드 창 새로 열어야 함 주의 (cmd)  

* 커맨드 창 환경변수 명령어
  set classpath 	   // classpath로 설정한 값 확인
   set classpath=환경변수값   // classpath 설정값 설정 

------------------------------------------------------------------
* import문
- 클래스를 사용할 때 패키지이름을 생략할 수 있다.			   import java.util.Date;   // Date클래스의 위치 알려주는 역할
ex)			
class ImportTest {						   class ImportTest { 	
    java.util.Date today = new java.util.Date();   ㅡㅡㅡㅡㅡ>    	Date today = new Date();
    // ...							    }
}

- java.lang패키지 (기본패키지 ex. String, Object, System, Thread, ... )의 클래스는 import하지 않고도 사용할 수 있다.

* import문의 선언
- import문 선언 방법 
    import 패키지명.클래스명;
	or
    import 패키지명.*;		// *은 해당 패키지에 속한 모든 클래스를 의미함

- import문은 패키지문과 클래스선언의 사이에 선언함
- import문은 컴파일 시에 처리되므로 프로그램의 성능에 영향없음.
   import java.util.Calendar;
  import java.util.Date;			ㅡㅡㅡ>              import java.util.*;
  import java.util.ArrayList;

- 하지만 다음의 두 코드는 의미 다르다.
    import java.util.*;
    import java.text.*;			ㅡㅡㅡ>	        import java.*;

- 이름이 같은 클래스가 속한 두 패키지를 import할 때는 클래스 앞에 패키지명을 붙여줘야 함 
   import java.sql.*;		// java.sql.Date   ①
  import java.util.*;		// java.util.Date  ②

  public class ImportTest {
	public static void main(String[] args) {
		java.util.Date today = new java.util.Date();   // 클래스 앞에 패키지 이름 적어주면 ①, ②중 어디에 속했는지 알수있음
	}
  }

* static import문
- static 멤버를 사용할 때 클래스 이름을 생략할 수 있게 해줌
  ex)
  import static java.lang.Integer.*;	// Integer클래스의 모든 static 메서드
 import static java.lang.Math.random;	// Math.random()만. 괄호 안붙임 
 import static java.lang.System.out;	// System.out을 out만으로 참조 가능
   	System.out.println(Math.random());   ㅡㅡㅡ>      out.println(random());

- static import문은 꼭 필요할 때만 쓰기 !

----------------------------------------------------------
* 제어자   (modifier)
- 클래스와 클래스의 멤버(멤버 변수, 메서드)에 부가적인 의미 부여  (영어로 따지면 '형용사'와 같은 개념)
  ▶ 접근 제어자: public, protected, (default), private
   ▶  그 외         : static, final, abstract, native, transient, synchronized, volatile, strictfp

- 하나의 대상에 여러 제어자를 같이 사용가능 (접근 제어자는 하나만 쓸 수 있음)
   public class ModifierTest {
	public static final int WIDTH = 200; 	    // 제어자 public, static, final 함께 사용 

	public static void main(String[] args) {    // 제어자 public, static 함께 사용 
	     System.out.println("WIDTH=" + WIDTH);
	}
   }
- 보통 관례적으로 접근 제어자를 제일 왼쪽에 씀 

* 제어자 'static' - 클래스의, 공통적인
* 제어자 'final'  - 마지막의, 변경될 수 없는
   ▶ 대상
  - 클래스 : 변경될 수 없는, 확장될 수 없는 클래스가 됨. ==> 그래서 final로 지정된 클래스는 다른 클래스의 조상이 될 수 없음 (변경X, 확장X)
	  ex) 대표적인 final 클래스 : String, Math 
	       String 클래스는 보안문제 때문에 상속이 불가능하도록 (조상에 접근불가하도록) final로 만듦
   - 메서드 : 변경될 수 없는 메서드. final로 지정된 메서드는 오버라이딩을 통해 재정의 될 수 없음.
   - 멤버변수, 지역변수 : 변수 앞에 final이 붙으면, 값을 변경할 수 없는 상수가 됨
  ex) 
   final class FinalTest {	   // 조상이 될 수 없는 클래스
     final int MAX_SIZE = 10;      // 값을 변경할 수 없는 멤버변수 (상수)

     final void getMaxSize() {     // 오버라이딩 불가 메서드 (변경 x)
     	final int LV = MAX_SIZE;   // 값을 변경할 수 없는 지역변수 (상수)
         	return MAX_SIZE; 
     }
  }

* 제어자 'abstract' - 추상의, 미완성의 
   ▶ 대상
   - 클래스 : 클래스 내에 추상 메서드가 선언되어 있음을 의미 
   - 메서드 :  선언부만 작성하고 구현부는 작성하지 않은 추상 메서드임을 알림 
    ex)
  abstract class AbstractTest {		// 추상 클래스 (추상 메서드를 포함한 클래스)
	abstract void move();		// 추상 메서드 (구현부가 없는 메서드)
  }
  AbstractTest a = new AbstractTest();	// error. 추상 클래스의 인스턴스 생성불가 !!! 

---------------------------------------------------------------
* 접근 제어자  (access modifier)
- private   : 같은 클래스 내에서만 접근이 가능
- (default) : 같은 패키지 내에서만 접근이 가능
- protected : 같은 패키지 내에서, 그리고 다른 패키지의 자손클래스에서 접근이 가능
- public    : 접근 제한이 전혀 없음

* 접근 범위 
-    public   >   protected   >   (default)   >   private 
  접근제한없음    같은 패키지+자손       같은 패키지         같은 클래스

ex1)
package pkg1;

public class MyParent {
     private   int prv;	 // 같은 클래스
     	       int dft;	 // 같은 패키지
     protected int prt;	 // 같은 패키지 + 자손(다른 패키지)
     public    int pub;  // 접근제한 없음.

     public void printMembers() {  	// 메서드 하나 만들어줌
	System.out.println(prv);	// 같은 패키지, 클래스 내에 있기 때문에 모두 접근 가능
	System.out.println(dft);
	System.out.println(prt);
	System.out.println(pub);
     }
}

class MyParentTest {				// 주의 : 한 패키지 내에 public클래스는 한 개만 ! 
     public static void main(String[] args){
	   MyParent p = new MyParent();		// 접근하기위해 객체 생성
	     System.out.println(p.prv);	// error. 접근 범위 맞지 않음 (private은 같은 클래스에서만 사용 가능, 다른 클래스임)
	   System.out.println(p.dft);	// ok
	   System.out.println(p.prt);	// ok
	   System.out.println(p.pub); 	//  ok
     }
}
/////////////////////////////////////////////////
ex2)
package pkg2;
import pkg1.MyParent;	// import 안해주면 에러남

class MyChild extends MyParent {
     public void printMembers() {  	// ex1)과 동일한 메서드 
	System.out.println(prv);	// error. 접근제어자가 private
	System.out.println(dft);	// error. 접근제어자가 default (같은 패키지가 아니라서 에러)
	System.out.println(prt);	// ok 	   다른 패키지이지만 자손클래스라서 ok
	System.out.println(pub);	// ok
     }
}

public class MyParentTest2{
     public static void main(String[] args) {
	   MyParent p = new MyParent();		// 접근하기위해 객체 생성
	     System.out.println(p.prv);	// error. 
	   System.out.println(p.dft);	// error.
	   System.out.println(p.prt);	// error. 다른 패키지에 자손 클래스도 아니라서 error.
	   System.out.println(p.pub); 	//  ok
     }
}
--------------------------------------------------------------
