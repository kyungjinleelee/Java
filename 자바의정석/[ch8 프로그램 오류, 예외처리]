[ch8 프로그램 오류, 예외처리]

* 프로그램 오류
- 컴파일 에러 : 컴파일 할 때 발생하는 에러	ex) system.out.println(args[0]);할 때 뜨는 빨간줄 & 에러 표시 
     참고: 컴파일러가 하는 일 ① 구문체크, ② 번역, ③ 소스코드 최적화 (ex. 간단한 계산, 생략된 코드 추가)
- 런타임 에러 : 실행 할 때 발생하는 에러 > 프로그램 종료 (문법에는 맞지만 자바 vm이 문법을 실행할 때 문제가 발생한 경우)
- 논리적 에러 : 작성 의도와 다르게 동작 > 프로그램 종료는 되지 않음

* Java의 런타임 에러 
- 에러 (error)        : 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
- 예외 (exception) : 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류 
==> 에러는 어쩔 수 없지만, 예외는 처리하자.

* 예외처리 (exception handling)의 정의와 목적
- 정의 : 프로그램 실행 시 발생할 수 있는 예외에 대비한 코드를 작성하는 것
- 목적 : 프로그램의 비정상 종료를 막고, 정상적인 실행 상태를 유지하는 것   (=간단한 에러때문에 프로그램이 종료되는 걸 막자!)

* 예외 클래스의 계층 구조
			        Exception(미약한 오류) ㅡ  RuntimeException
				   ㅣ		      |
(최고조상)   (클래스. 모든 오류의 조상)ㅣ		      ㅡ IOException
  Object   ㅡ   Throwable  ㅡㅡㅡㅡㅡㅡ		      |
				   |		      ㅡ ClassNotFoundException
				   |		      |
				   |		      ㅡ ...
				   |
				 Error(심각한 오류) ㅡ OutOfMemoryError (메모리 부족)
						  |
						   ㅡ ...

* Exception클래스와 그 자손들의 구분
Exception(미약한 오류) ㅡ IOException (입/출력 예외)		// Exception과 그 자손들 
		     ㅣ		      
		      ㅡ ClassNotFoundException (클래스가 존재하지 않음)
  		      |
		      ㅡ ...
      -----------     | ----------------------------------
		      ㅡ RuntimeException			// RuntimeException과 그 자손들로 크게 2가지로 구분
				ㅣ
				 ㅡ ArithmeticException (산술계산 예외  ex.특정 수를 0으로 나눴을 때 발생)
				ㅣ
				 ㅡ ClassCastException (형변환 잘못했을 때 발생)
				ㅣ
				 ㅡ NullPointerException (null값을 가리키거나 호출했을 때 발생)
				ㅣ
				  ㅡ ...
				ㅣ
				 ㅡ IndexOutOfBoundsException (배열 범위를 벗어났을 때 발생)

* Exception과 RuntimeException 의 차이
- Exception클래스들 	  : 사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외
- RuntimeException클래스들 : 프로그래머의 실수로 발생하는 예외 

--------------------------------------------------------------------


