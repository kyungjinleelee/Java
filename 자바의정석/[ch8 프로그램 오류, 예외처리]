[ch8 프로그램 오류, 예외처리]

* 프로그램 오류
- 컴파일 에러 : 컴파일 할 때 발생하는 에러	ex) system.out.println(args[0]);할 때 뜨는 빨간줄 & 에러 표시 
     참고: 컴파일러가 하는 일 ① 구문체크, ② 번역, ③ 소스코드 최적화 (ex. 간단한 계산, 생략된 코드 추가)
- 런타임 에러 : 실행 할 때 발생하는 에러 > 프로그램 종료 (문법에는 맞지만 자바 vm이 문법을 실행할 때 문제가 발생한 경우)
- 논리적 에러 : 작성 의도와 다르게 동작 > 프로그램 종료는 되지 않음

* Java의 런타임 에러 
- 에러 (error)        : 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
- 예외 (exception) : 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류 
==> 에러는 어쩔 수 없지만, 예외는 처리하자.

* 예외처리 (exception handling)의 정의와 목적
- 정의 : 프로그램 실행 시 발생할 수 있는 예외에 대비한 코드를 작성하는 것
- 목적 : 프로그램의 비정상 종료를 막고, 정상적인 실행 상태를 유지하는 것   (=간단한 에러때문에 프로그램이 종료되는 걸 막자!)

* 예외 클래스의 계층 구조
			        Exception(미약한 오류) ㅡ  RuntimeException
				   ㅣ		      |
(최고조상)  (클래스.모든오류의 조상)ㅣ		      ㅡ IOException
  Object   ㅡ Throwable  ㅡ ㅡㅡㅡㅡ		      |
				   |		      ㅡ ClassNotFoundException
				   |		      |
				   |		      ㅡ ...
				   |
				 Error(심각한 오류) ㅡ OutOfMemoryError (메모리 부족)
						  |
						   ㅡ ...

* Exception클래스와 그 자손들의 구분
Exception(미약한 오류) ㅡ IOException (입/출력 예외)		// Exception과 그 자손들 
		     ㅣ		      
		      ㅡ ClassNotFoundException (클래스가 존재하지 않음)
  		      |
		      ㅡ ...
      -----------     | ----------------------------------
		      ㅡ RuntimeException			// RuntimeException과 그 자손들로 크게 2가지로 구분
				ㅣ
				 ㅡ ArithmeticException (산술계산 예외  ex.특정 수를 0으로 나눴을 때 발생)
				ㅣ
				 ㅡ ClassCastException (형변환 잘못했을 때 발생)
				ㅣ
				 ㅡ NullPointerException (null값을 가리키거나 호출했을 때 발생)
				ㅣ
				  ㅡ ...
				ㅣ
				 ㅡ IndexOutOfBoundsException (배열 범위를 벗어났을 때 발생)

* Exception과 RuntimeException 의 차이
- Exception클래스들 	  : 사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외
- RuntimeException클래스들 : 프로그래머의 실수로 발생하는 예외 

--------------------------------------------------------------------
* 예외 처리하기, < try-catch문 >
 - 문법
  try {
	// 예외가 발생할 가능성이 있는 문장들을 넣는다.
  } catch (Exception1 e1) {
	// Exception1이 발생했을 경우, 이를 처리하기 위한 문장을 넣는다.
 } catch (Exception2 e2) {
	// Exception2이 발생했을 경우, 이를 처리하기 위한 문장을 넣는다.
 } catch (ExceptionN eN) {
	// ExceptionN이 발생했을 경우, 이를 처리하기 위한 문장을 넣는다.
 }

- 주의 : if문과 달리, try블럭이나 catch블럭 내에 포함된 문장이 하나뿐이어도 괄호{} 생략 불가하다.

* try-catch문에서의 흐름
① try블럭 내에서 예외가 발생한 경우,
 1. 발생한 예외와 일치하는 catch 블럭이 있는지 확인
  2. 일치하는 catch블럭을 찾게되면, 그 catch블럭 내의 문장들을 수행하고 전체 try-catch문을 빠져나가서 그 다음 문장을 계속해서 수행한다. 
     만일 일치하는 catch블럭을 찾지 못하면, 예외는 처리되지 못한다.

② try블럭 내에서 예외가 발생하지 않은 경우,
  1. catch블럭을 거치지 않고 전체 try-catch문을 빠져나가서 수행을 계속한다.
ex)
class Ex8_1 {
	public static void main(String args[]) {
		System.out.print(1);
		try{
			System.out.print(2);
			System.out.print(3);
		} catch (Exception e) {
			System.out.print(4);
		} // try-catch의 끝
		System.out.print(5);
	}
}
// 결과: 1235

ex 2) 예외가 발생했을 때
class Ex8_2 {
	public static void main(String args[]) {
		System.out.print(1);
		try{
			System.out.print(0/0);	  // 예외 발생! (0으로 나누는 것 금지)
			System.out.print(2);
		} catch (ArithmeticException ae) {
			System.out.print(3);
		} // try-catch의 끝
		System.out.print(4);
	} // main메서드의 끝
} // 결과: 134

* 예외의 발생과  catch블럭
- 예외가 발생하면, 이를 처리할 catch블럭을 찾아 내려감
- 일치하는 catch블럭이 없으면, 예외는 처리 안됨
- Exception이 선언된 catch블럭은 모든 예외 처리 (마지막 catch블럭)
ex) 
class Ex8_4 {
	public static void main(String args[]) {
		System.out.println(1);
		System.out.println(2);
		try{
			System.out.println(3);
			System.out.println(0/0);	// 0으로 나눠서 고의로 ArithmeticException을 발생시킨다.
			System.out.println(4);		// 실행 x 
		} catch (ArithmeticException ae) {	  		// catch블럭 ①
			if (ae instanceof ArithmeticException)
			   System.out.println("true");
			System.out.println("ArithmeticException");
		} catch (Exception e) {					// ②, ArithmeticException 제외한 모든 예외가 처리됨
			System.out.println("Exception");
		} // try-catch의 끝
		System.out.println(6);
	} // main메서드의 끝
} 
==> 결과 :
1
2
3
true
ArithmeticException
6

-------------------------------------------------------------------------
* printStackTrace()와  getMessage()
▶ printStackTrace() : 예외발생 당시의 호출 스택 (Call Stack)에 있었던 메서드의 정보와 예외 메서드를 화면에 출력
▶ getMessage()      : 발생한 예외클래스의 인스턴스에 저장된 메시지를 얻을 수 있음

ex) 
class Ex8_5 {
	public static void main(String args[]) {
	   System.out.println(1);
	   System.out.println(2);

	   try{
		System.out.println(3);
		System.out.println(0/0);	// 예외발생 > 예외정보가 들어있는 예외 객체 생성됨 > 메서드로 그 정보를 가져올 수 있다.
		System.out.println(4);		
	   } catch (ArithmeticException ae) {	  		
		ae.printStackTrace();		// 참조변수 ae를 통해, 생성된 ArithmeticException 인스턴스에 접근 
		System.out.println("예외메시지 : " + ae.getMessage());
	   } 
	System.out.println(6);
	}
} 
==> 결과 :
1
2
3
java.lang.ArithmeticException: / by zero at Ex8_5.main(Ex8_5.java:8)
예외메시지 : / by zero
6 

* 멀티 catch블럭
- 내용이 같은 catch블럭을 하나로 합친 것  (JDK1.7부터)
try{
	...						try {
} catch (ExceptionA e) {						...
	e.printStackTrace();				} catch (ExceptionA | ExceptionB e) {	// 내용 동일 중복제거
} catch (ExceptionB e2) {		ㅡㅡㅡㅡㅡ>		e.printStackTrace();
	e2.printStackTrace();				}
} 


- 주의: 예외가 부모자식간의 관계면 성립 X -> 왜냐하면 이렇게 쓸 이유가 없음.
ex 1)
try{
	...
// } catch (ParentException | ChildException e) {	  	// error !!!
} catch (ParentException e) {				// ok. 위의 라인과 의미상 동일 
	e.printStackTrace();		
} 

ex 2)
try{
	...						
} catch (ExceptionA | ExceptionB e) {		
	e.methodA();			// error. ExceptionA에 선언된 methodA()는 호출 불가.			
	
	if( e instanceof ExceptionA ){		// 정 ~ 객체별로 다르게 동작되고 싶게 하려면 이렇게
		ExceptionA e1 = (ExceptionA)e;	// 형변환 필요  (이렇게 멀티 catch블럭 쓸 바에 따로 쓰는게 남)
		e1.methodA();			// ok. ExceptionA에 선언된 메서드 호출 가능
	} else {  // if(e instanceof ExceptionB)
		...
--------------------------------------------------------------
* 예외 발생시키기
- 방법
1. 연산자 new를 이용 > 발생시키려는 예외 클래스의 객체를 만든다.
	Exception e = new Exception("고의로 발생시켰음");

2. 키워드 throw를 이용 > 예외를 발생시킨다. (생성한 객체를 던지기)
	throw e;
ex) 
class Ex8_6 {
	public static void main(String[] args) {
	   try{
		Exception e = new Exception("고의로 발생시켰음");
		throw e;		// 예외를 발생시킴
		// throw new Exception("고의로 발생시켰음"); ==> 위의 두 줄을 이 한 줄로 줄일 수 있음
	
	   } catch (Exception e) {	  		
		System.out.println("예외메시지 : " + e.getMessage());
		e.printStackTrace();		
	   } 
	System.out.println("프로그램 정상 종료됨");
	}
} 
==> 결과 :
예외메시지 : 고의로 발생시켰음
java.lang.Exception: 고의로 발생시켰음 at Ex8_6.main(Ex8_6.java:4)
프로그램 정상 종료됨

* 예외의 종류 : checked 예외, unchecked 예외
▶ checked예외     : 컴파일러가 예외 처리 여부를 체크하는 것 (예외 처리 필수, Exception과 그 자손들을 의미)
▶ unchecked예외 : 컴파일러가 예외 처리 여부를 체크 안함 (예외 처리 선택, RuntimeException과 그 자손들을 의미 )

▶ ex 1)
class Ex8_7 {
	public static void main(String[] args) {
		throw new Exception;			// 예외 고의로 발생, checked예외 (예외처리 필수), 빨간 줄 뜸 
	}
}
==> 컴파일 error
Ex8_7.java:3: unreported exception java.lang.Exception; must(예외처리 필수라는 뜻) be caught or de clared to be thrown
		throw new Exception();
^
1 error

▶ ex 2)
class Ex8_8 {
	public static void main(String[] args) {
		throw new RuntimeException;			// 예외 고의로 발생, unchecked예외 (예외처리 필수), 빨간 줄 안뜸
	}
}
==> 컴파일 ok, 실행 시 error
==> 실행 결과
Exception in thread "main" java.lang.RuntimeException at Ex8_8.main(Ex8_8.java:3)

--------------------------------------------------------------------
* 메서드에 예외 선언하기
- 예외를 처리하는 방법 : ① try-catch문 (=직접 처리) , ② 예외 선언하기 (=예외 떠넘기기), ③ 은폐 (=덮기, 빈 try-catch문을 쓰는 것, 지양)
- 메서드가 호출 시 발생가능한 예외를 호출하는 쪽에 알리는 것
- 예외를 발생시키는 키워드 throw와 예외를 메서드에 선언할 때 쓰이는 throws를 잘 구별하자.

void method() throws Exception1, Exception2, ... ExceptionN {	// 메서드에 예외 선언
	// 메서드 내용
}

// method()에서 Exception과 그 자손 예외 발생 가능
void method() throws Exception {				// 모든 예외의 최고 조상
	// 메서드 내용
}

▶ ex1)
static void startInstall() throws SpaceException, MemoryException { // 이 메서드 사용 시 두 가지 예외가 발생 가능인 걸 설명
	if (!enougnSpace())		// 충분한 설치 공간이 없으면 ..
	   throw new SpaceException("설치할 공간이 부족합니다.");
	if (!enougnMemory())		// 충분한 설치 공간이 없으면 ..
	   throw new MemoryException("메모리가 부족합니다.");
} // startInstall메서드의 끝

▶ ex2)
import java.io.*;

class Ex8_10 {
    public static void main(String[] args) {
	   try{							// 떠넘겨진 예외를 try-catch문으로 처리
		File f = createFile(args[0]);			// main에서 createFile 일시킴 > 예외 발생 > 처리할 catch블럭 찾음
		System.out.println( f.getName() + "파일이 성공적으로 생성되었습니다.");
	    } catch (Exception e) {
		System.out.println( e.getMessage() + "다시 입력해 주시기 바랍니다.");
	    }
    } // end main

    static File createFile(String fileName) throws Exception {	// 예외 발생 시 호출한 곳(main)으로 예외 떠넘김
	if (fileName == null || fileName.equals(""))
		throw new Exception("파일이름이 유효하지 않습니다.");
	File f = new File(fileName);	// File클래스의 객체 생성
	
	f.createNewFile();		// File객체의 createNewFile메서드를 이용해서 실제 파일 생성
	return f;			// 생성된 객체의 참조를 main으로 반환
    } // end createFile
} // end class

==> 결과
C:\jdk1.8\work\ch8>java Ex8_10 test2.txt
test2.txt파일이 성공적으로 생성되었습니다.

C:\jdk1.8\work\ch8>java Ex8_10 ""
파일이름이 유효하지 않습니다. 다시 입력해 주시기 바랍니다.

==> 참고: args[0] 값을 지정해주려면 상단 실행단추에서 Run Configurations > Arguments > Program arguments에 원하는 값 작성 > Run
    이게 귀찮으면 File f = createFile("test2.txt"); 라고 직접 명시해줘도 됨 
       프로젝트 우클릭 > Refresh 하면 만들어진 test2.txt 파일이 보일 것

