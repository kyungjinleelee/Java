[ch8 프로그램 오류, 예외처리]

* 프로그램 오류
- 컴파일 에러 : 컴파일 할 때 발생하는 에러	ex) system.out.println(args[0]);할 때 뜨는 빨간줄 & 에러 표시 
     참고: 컴파일러가 하는 일 ① 구문체크, ② 번역, ③ 소스코드 최적화 (ex. 간단한 계산, 생략된 코드 추가)
- 런타임 에러 : 실행 할 때 발생하는 에러 > 프로그램 종료 (문법에는 맞지만 자바 vm이 문법을 실행할 때 문제가 발생한 경우)
- 논리적 에러 : 작성 의도와 다르게 동작 > 프로그램 종료는 되지 않음

* Java의 런타임 에러 
- 에러 (error)        : 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
- 예외 (exception) : 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류 
==> 에러는 어쩔 수 없지만, 예외는 처리하자.

* 예외처리 (exception handling)의 정의와 목적
- 정의 : 프로그램 실행 시 발생할 수 있는 예외에 대비한 코드를 작성하는 것
- 목적 : 프로그램의 비정상 종료를 막고, 정상적인 실행 상태를 유지하는 것   (=간단한 에러때문에 프로그램이 종료되는 걸 막자!)

* 예외 클래스의 계층 구조
			        Exception(미약한 오류) ㅡ  RuntimeException
				   ㅣ		      |
(최고조상)  (클래스.모든오류의 조상)ㅣ		      ㅡ IOException
  Object   ㅡ Throwable  ㅡ ㅡㅡㅡㅡ		      |
				   |		      ㅡ ClassNotFoundException
				   |		      |
				   |		      ㅡ ...
				   |
				 Error(심각한 오류) ㅡ OutOfMemoryError (메모리 부족)
						  |
						   ㅡ ...

* Exception클래스와 그 자손들의 구분
Exception(미약한 오류) ㅡ IOException (입/출력 예외)		// Exception과 그 자손들 
		     ㅣ		      
		      ㅡ ClassNotFoundException (클래스가 존재하지 않음)
  		      |
		      ㅡ ...
      -----------     | ----------------------------------
		      ㅡ RuntimeException			// RuntimeException과 그 자손들로 크게 2가지로 구분
				ㅣ
				 ㅡ ArithmeticException (산술계산 예외  ex.특정 수를 0으로 나눴을 때 발생)
				ㅣ
				 ㅡ ClassCastException (형변환 잘못했을 때 발생)
				ㅣ
				 ㅡ NullPointerException (null값을 가리키거나 호출했을 때 발생)
				ㅣ
				  ㅡ ...
				ㅣ
				 ㅡ IndexOutOfBoundsException (배열 범위를 벗어났을 때 발생)

* Exception과 RuntimeException 의 차이
- Exception클래스들 	  : 사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외
- RuntimeException클래스들 : 프로그래머의 실수로 발생하는 예외 

--------------------------------------------------------------------
* 예외 처리하기, < try-catch문 >
 - 문법
  try {
	// 예외가 발생할 가능성이 있는 문장들을 넣는다.
  } catch (Exception1 e1) {
	// Exception1이 발생했을 경우, 이를 처리하기 위한 문장을 넣는다.
 } catch (Exception2 e2) {
	// Exception2이 발생했을 경우, 이를 처리하기 위한 문장을 넣는다.
 } catch (ExceptionN eN) {
	// ExceptionN이 발생했을 경우, 이를 처리하기 위한 문장을 넣는다.
 }

- 주의 : if문과 달리, try블럭이나 catch블럭 내에 포함된 문장이 하나뿐이어도 괄호{} 생략 불가하다.

* try-catch문에서의 흐름
① try블럭 내에서 예외가 발생한 경우,
 1. 발생한 예외와 일치하는 catch 블럭이 있는지 확인
  2. 일치하는 catch블럭을 찾게되면, 그 catch블럭 내의 문장들을 수행하고 전체 try-catch문을 빠져나가서 그 다음 문장을 계속해서 수행한다. 
     만일 일치하는 catch블럭을 찾지 못하면, 예외는 처리되지 못한다.

② try블럭 내에서 예외가 발생하지 않은 경우,
  1. catch블럭을 거치지 않고 전체 try-catch문을 빠져나가서 수행을 계속한다.
ex)
class Ex8_1 {
	public static void main(String args[]) {
		System.out.print(1);
		try{
			System.out.print(2);
			System.out.print(3);
		} catch (Exception e) {
			System.out.print(4);
		} // try-catch의 끝
		System.out.print(5);
	}
}
// 결과: 1235

ex 2) 예외가 발생했을 때
class Ex8_2 {
	public static void main(String args[]) {
		System.out.print(1);
		try{
			System.out.print(0/0);	  // 예외 발생! (0으로 나누는 것 금지)
			System.out.print(2);
		} catch (ArithmeticException ae) {
			System.out.print(3);
		} // try-catch의 끝
		System.out.print(4);
	} // main메서드의 끝
} // 결과: 134
