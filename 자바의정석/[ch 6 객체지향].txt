[ch 6 객체지향] **중요

* 객체지향 언어
'80년 초 소프트웨어의 위기 - 빠른 변화를 못 쫓아감
해결책으로 객체지향 언어를 도입 (절차적 -> 객체지향)

객체지향 언어 = 기존의 프로그래밍 언어에 + 객체지향개념(규칙)이 추가된 것일 뿐임 ! 
-> '코드의 재사용성이 높고 유지보수가 용이, 중복 코드 제거' 를 위해

* oop (object-oriented programming) (=객체 지향 프로그래밍)의  4가지 핵심 개념  // 캡상추다 ㅎㅎ..
1. 캡슐화
2. 상속
3. 추상화
4. 다형성 (*중요)

* 클래스와 객체
<클래스>
- 클래스: 객체를 정의해 놓은 것 (객체는 이러이러하다는 걸 설명해놓은 것) ( = 설계도.)
- 용도: 클래스는 객체를 생성하는데 사용 

<객체>
- 객체: 실제로 존재하는 것. 사물 또는 개념			     ( = 제품.)
- 용도: 객체가 가지고 있는 기능과 속성에 따라 다름 

ex)
클래스: 제품 설계도, tv 설계도, 붕어빵 기계
객체   : 제품         , tv      , 붕어빵

Q. 설계도를 왜 만들어요 ?
A. 제품을 쉽게 만들려고! 한번 만들어놓으면 다음에 만들 때 편하니까.

---------------------------------------------------------------
* 객체의 구성요소 - 속성과 기능
실제 세계를 어떻게 하면 컴퓨터 안으로 옮겨놓을까? 에서 부터 나온 고민들.
TV라는 Hardward를 software로 만들어서 컴퓨터 안으로 설치 > 컴퓨터 안에서 tv보듯이 할 수 있는 것. (hardward를 softward화)

Q. Hardware를 software로 바꾸려면 어떻게 해야대여?
A. Hardware를 분석 & 관찰 해야합니다. 어떻게 해야 software화 할까? (=어떻게 해야 프로그램화 할 수 있을까?)

"' 객체 = 속성(변수) + 기능(메서드) '"

ex)
속성: 크기, 길이, 높이, 색상, 볼륨, 채널 등 			// 변수
기능: 켜기, 끄기, 볼륨 높이기, 볼륨 낮추기. 채널 변경하기 등 	// 메서드

class TV {
    String color;    // 색깔 
    boolean power;   // 전원상태
    int channel;     // 채널

void power()	   { power = !power; }
void channelUp()   { channel++;}
void channelDown() { channel--;}
}

* 객체와 인스턴스
- 객체: 모든 인스턴스를 대표하는 일반적 용어
- 인스턴스: 특정 클래스로부터 생성된 객체 (ex: TV 인스턴스)
- 인스턴스화: 앞에서 말한 설계도를 가지고 제품을 만드는 걸 '인스턴스화'라고 함.

	  인스턴스화
클래스 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ> 인스턴스 (객체)


* 정리 ! 
 q. 클래스가 왜 필요한가?
 a. 객체를 생성하기 위해 

 q. 객체는 왜 필요한가?	(이 말인즉, tv는 왜 필요한가?)
 a. 객체를 사용하기 위해 	(tv 볼려고!)

 q. 객체를 사용한다는 것은?
 a. 객체가 가진 속성과 기능을 사용하는 것  

---------------------------------------------------------------------
